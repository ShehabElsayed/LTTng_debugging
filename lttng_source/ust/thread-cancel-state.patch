From ac5195f4bf95e24bd5b4fe1d9ccc7cccbe44dcdd Mon Sep 17 00:00:00 2001
From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
Date: Wed, 21 Mar 2018 16:16:38 -0400
Subject: [RFC PATCH] Fix: restore original thread cancel state

Useful when ust_lock is used in application threads that have a
different cancel state (e.g. perf counters context).

Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
---
 liblttng-ust/lttng-ust-comm.c | 27 ++++++++++++++++-----------
 1 file changed, 16 insertions(+), 11 deletions(-)

diff --git a/liblttng-ust/lttng-ust-comm.c b/liblttng-ust/lttng-ust-comm.c
index 9520f246..8c5985a9 100644
--- a/liblttng-ust/lttng-ust-comm.c
+++ b/liblttng-ust/lttng-ust-comm.c
@@ -92,6 +92,8 @@ static pthread_mutex_t ust_mutex = PTHREAD_MUTEX_INITIALIZER;
 /* Allow nesting the ust_mutex within the same thread. */
 static DEFINE_URCU_TLS(int, ust_mutex_nest);
 
+static DEFINE_URCU_TLS(int, pthread_cancel_oldstate);
+
 /* Do not trace events for the current thread. */
 DEFINE_URCU_TLS(int, lttng_ust_notrace_thread) __attribute__((visibility("hidden")));
 
@@ -144,15 +146,13 @@ void lttng_ust_end_notrace(void)
 int ust_lock(void)
 {
 	sigset_t sig_all_blocked, orig_mask;
-	int ret, oldstate;
+	int ret;
 
-	ret = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &oldstate);
+	ret = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE,
+		&pthread_cancel_oldstate);
 	if (ret) {
 		ERR("pthread_setcancelstate: %s", strerror(ret));
 	}
-	if (oldstate != PTHREAD_CANCEL_ENABLE) {
-		ERR("pthread_setcancelstate: unexpected oldstate");
-	}
 	sigfillset(&sig_all_blocked);
 	ret = pthread_sigmask(SIG_SETMASK, &sig_all_blocked, &orig_mask);
 	if (ret) {
@@ -180,15 +180,13 @@ int ust_lock(void)
 void ust_lock_nocheck(void)
 {
 	sigset_t sig_all_blocked, orig_mask;
-	int ret, oldstate;
+	int ret;
 
-	ret = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &oldstate);
+	ret = pthread_setcancelstate(PTHREAD_CANCEL_DISABLE,
+		&pthread_cancel_oldstate);
 	if (ret) {
 		ERR("pthread_setcancelstate: %s", strerror(ret));
 	}
-	if (oldstate != PTHREAD_CANCEL_ENABLE) {
-		ERR("pthread_setcancelstate: unexpected oldstate");
-	}
 	sigfillset(&sig_all_blocked);
 	ret = pthread_sigmask(SIG_SETMASK, &sig_all_blocked, &orig_mask);
 	if (ret) {
@@ -221,7 +219,7 @@ void ust_unlock(void)
 	if (ret) {
 		ERR("pthread_sigmask: %s", strerror(ret));
 	}
-	ret = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &oldstate);
+	ret = pthread_setcancelstate(pthread_cancel_oldstate, &oldstate);
 	if (ret) {
 		ERR("pthread_setcancelstate: %s", strerror(ret));
 	}
@@ -414,6 +412,12 @@ void lttng_fixup_lttng_ust_notrace_tls(void)
 	asm volatile ("" : : "m" (URCU_TLS(lttng_ust_notrace_thread)));
 }
 
+static
+void lttng_fixup_pthread_cancel_oldstate_tls(void)
+{
+	asm volatile ("" : : "m" (URCU_TLS(pthread_cancel_oldstate)));
+}
+
 /*
  * Fixup urcu bp TLS.
  */
@@ -433,6 +437,7 @@ void lttng_ust_fixup_tls(void)
 	lttng_fixup_procname_tls();
 	lttng_fixup_ust_mutex_nest_tls();
 	lttng_fixup_lttng_ust_notrace_tls();
+	lttng_fixup_pthread_cancel_oldstate_tls();
 	lttng_ust_fixup_fd_tracker_tls();
 }
 
-- 
2.11.0

